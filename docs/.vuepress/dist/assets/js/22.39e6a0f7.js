(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{1081:function(e,a,t){"use strict";t.r(a);var o=t(15),n=Object(o.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("TitleSpan",[e._v("Introduction")]),e._v(" "),o("h1",{attrs:{id:"frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),o("VersionWarning"),e._v(" "),o("TocHeader"),e._v(" "),o("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),e._v(" "),o("p",[e._v("Beacons are first-party Web3 data feeds run by the API data providers themselves, without third-party oracle nodes as middlemen. Beacons allow smart contract developers to connect their Web3 applications to continuously updated streams of off-chain data, such as the latest cryptocurrency, stock and commodities prices. They can power various decentralized applications, such as DeFi lending, synthetic assets, stable coins, derivatives, quality assurance, NFTs and more. Operated by the marketâ€™s most trusted and reliable data providers, Beacons are a transparent, cost efficient and scalable way for smart contracts to connect to the data that they need.")]),e._v(" "),o("p",[e._v("To achieve a completely transparent and secure design, Beacons are operated directly by the API provider of the data they serve, without third-party node operators used as data relayers. This means that when calling a Beacon for the latest price of an asset, your smart contract receives a value directly from the Web3-enabled API of the source data provider - not a third-party or a network of third party middlemen.")]),e._v(" "),o("p",[e._v("The provider-operated nature of Beacons allows any dApp to consider the off-chain reputation of the data provider and their suitability for any use case. Bringing this level of transparency to the source of data in smart contracts gives dApp developers confidence rather than relying on a pseudonymous selection of third parties.")]),e._v(" "),o("h2",{attrs:{id:"simple-implementation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#simple-implementation"}},[e._v("#")]),e._v(" Simple Implementation")]),e._v(" "),o("p",[e._v("The Beacon Server contract ("),o("em",[e._v("RrpBeaconServer.sol")]),e._v(") maintains a cache of on-chain Beacon values readily available for smart contracts to retrieve instantly as illustrated in figure below. A Beacon is updated when a pre-defined tolerance of the Beacon's value is detected. Each Beacon has its own configuration parameters that define when and how it updates. See the "),o("RouterLink",{attrs:{to:"/beacon/v0.1/functions/read-beacon.html"}},[e._v("readBeacon()")]),e._v(" function doc and learn how your smart contract can access a Beacon .")],1),e._v(" "),o("blockquote",[o("p",[o("img",{attrs:{src:t(610),alt:"dapp-beacon.png"}})])]),e._v(" "),o("h2",{attrs:{id:"airnode-enabled"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#airnode-enabled"}},[e._v("#")]),e._v(" Airnode Enabled")]),e._v(" "),o("p",[e._v("Making it all work is a simple and efficient system that leverages first-party Airnodes to keep individual Beacon values up-to-date. When a Beacon's value falls outside a pre-defined tolerance it self-updates by calling its associated Airnode.")]),e._v(" "),o("p",[e._v("In the figure below, on-chain Beacons request updates from their linked off-chain Airnode. The Airnode's owner (an API provider) configures the pre-defined tolerance of a Beacon's value as well as the frequency to check for tolerance deviation. The Beacon's value is updated when the off-chain value falls outside the Beacons value's defined tolerance. Note that a Airnode can be related to more than one Beacon.")]),e._v(" "),o("blockquote",[o("p",[o("img",{attrs:{src:t(611),alt:"beacon-airnode.png"}})])]),e._v(" "),o("h2",{attrs:{id:"dapis-building-on-beacons"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dapis-building-on-beacons"}},[e._v("#")]),e._v(" dAPIs (Building on Beacons)")]),e._v(" "),o("p",[e._v("To further exploit the benefit of Beacons, forthcoming dAPIs will enable dApp developers a powerful new tool to quickly acquire aggregated Beacon values on-chain.")]),e._v(" "),o("p",[e._v("dAPIs, like Beacons, are data feeds built entirely on-chain by aggregating data from more than one Beacon. Because they are built on top of the Beacon layer their data is also from first-party API provider "),o("em",[e._v("owned and operated Airnodes")]),e._v(".")]),e._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[e._v("dAPIs are under development for a pending release.")]),e._v(" "),o("p")]),e._v(" "),o("blockquote",[o("p",[o("img",{attrs:{src:t(612),alt:"beacon-airnode.png"}})]),e._v(" "),o("p",{staticClass:"diagram-line",staticStyle:{color:"gray","margin-top":"6px"}},[e._v("A dApp would call a dAPI, as it would a Beacon, to get an instant\nresponse.")])]),e._v(" "),o("p",[e._v("dAPIs consume data from Beacons in order to provide an aggregate value. For example, in the diagram above there could be a dAPI for the ETH/USD price where it fetches different prices from multiple Beacons such as a CoinGecko ETH/USD beacon value, a Binance ETH/USD beacon value and so on. Such an dAPI would aggregate and provide a value for the ETH/USD pair. This is just one use case for a dAPI from endless possibilities.")])],1)}),[],!1,null,null,null);a.default=n.exports},610:function(e,a,t){e.exports=t.p+"assets/img/dapp-beacon.130995f5.png"},611:function(e,a,t){e.exports=t.p+"assets/img/beacon-airnode.6a22d945.png"},612:function(e,a,t){e.exports=t.p+"assets/img/dapi-beacons.23bd5396.png"}}]);