(window.webpackJsonp=window.webpackJsonp||[]).push([[480],{1138:function(t,s,e){"use strict";e.r(s);var a=e(15),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("TitleSpan",[t._v("OIS")]),t._v(" "),e("h1",{attrs:{id:"frontmatter-title"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),e("VersionWarning"),t._v(" "),e("TocHeader"),t._v(" "),e("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,4]}}),t._v(" "),e("p",[t._v("保留参数是OIS对象的一部分，是"),e("code",[t._v("endpoints")]),t._v("字段（Airnode 终端节点）的一部分，值得深入解释。 它们是OIS对象中Airnode定义的节点的一部分，但不映射到操作参数（API参数）。 它们被Airnode用于特殊目的。")]),t._v(" "),e("p",[t._v("请求者可以通过引用包含参数的"),e("RouterLink",{attrs:{to:"/airnode/v0.5/concepts/template.html"}},[t._v("模板")]),t._v("来传递请求参数，或者作为"),e("RouterLink",{attrs:{to:"/airnode/v0.5/concepts/#airnoderrp-sol"}},[t._v("AirnodeRrp.sol")]),t._v("的请求制作方法的一个参数。 在这两种情况下，这些参数都会使用"),e("RouterLink",{attrs:{to:"/airnode/v0.5/reference/specifications/airnode-abi-specifications.html"}},[t._v("AirnodeRrp ABI")]),t._v("进行编码。 作为"),e("RouterLink",{attrs:{to:"/ois/v1.0.0/"}},[t._v("OIS")]),t._v("对象的一部分，有两种类型的参数:")],1),t._v(" "),e("ol",[e("li",[e("RouterLink",{attrs:{to:"/ois/v1.0.0/ois.html#_5-5-parameters"}},[t._v("节点参数")]),t._v(" - Airnode节点参数被映射到API操作参数。")],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ois/v1.0.0/ois.html#_5-4-reservedparameters"}},[t._v("保留参数")]),t._v(" - 保留参数在完成请求之前对响应进行特定的操作。 保留的参数名称以"),e("code",[t._v("_")]),t._v("开头。")],1)]),t._v(" "),e("h2",{attrs:{id:"type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" "),e("code",[t._v("_type")])]),t._v(" "),e("p",[t._v("标志着 API 响应在执行前将被编码为何种 Solidity 类型。")]),t._v(" "),e("p",[t._v("对大多数常见的 "),e("a",{attrs:{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#types",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solidity 类型"),e("OutboundLink")],1),t._v("提供支持，但不支持以下类型。")]),t._v(" "),e("ul",[e("li",[t._v("自定义位的整数类型--如"),e("code",[t._v("uint32")]),t._v("或"),e("code",[t._v("uint8")])]),t._v(" "),e("li",[t._v("固定点十进制数字--如"),e("code",[t._v("fixed128x18")]),t._v("或"),e("code",[t._v("ufixed128x18")])]),t._v(" "),e("li",[t._v("自定义固定大小的字节--例如"),e("code",[t._v("byte4")])]),t._v(" "),e("li",[t._v("元组--例如"),e("code",[t._v("(int256, string)")])])]),t._v(" "),e("p",[t._v('在支持的实体类型的基础上，还支持一些为特殊目的而创建的 "人工" 类型，否则就很难或无法表示。')]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/ois/v1.0.0/reserved-parameters.html#string32-encoded-to-bytes32-on-chain"}},[e("code",[t._v("string32")])])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ois/v1.0.0/reserved-parameters.html#timestamp-encoded-to-uint256-on-chain"}},[e("code",[t._v("timestamp")])])],1)]),t._v(" "),e("p",[t._v("你也可以为一个单一的API调用编码多个值--但这影响到所有的保留参数，并在下面的"),e("RouterLink",{attrs:{to:"/ois/v1.0.0/reserved-parameters.html#encoding-multiple-values"}},[t._v("编码多个值")]),t._v("部分进行解释。")],1),t._v(" "),e("h3",{attrs:{id:"转换和编码行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转换和编码行为"}},[t._v("#")]),t._v(" 转换和编码行为")]),t._v(" "),e("p",[t._v("在API响应值被编码以便在链上使用之前，它被解析和转换。 任何给定类型的转换行为在"),e("RouterLink",{attrs:{to:"/airnode/v0.5/reference/packages/adapter.html#conversion"}},[t._v("适配器包文档")]),t._v("中都有深入解释。")],1),t._v(" "),e("p",[t._v("然后，转换后的值由"),e("a",{attrs:{href:"https://docs.ethers.io/v5/api/utils/abi/coder/#AbiCoder",target:"_blank",rel:"noopener noreferrer"}},[t._v("ethers ABI Coder"),e("OutboundLink")],1),t._v("使用以下方式进行内部编码")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("ethers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultAbiCoder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("solidityType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h4",{attrs:{id:"支持的原始值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持的原始值"}},[t._v("#")]),t._v(" 支持的原始值")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("int256")])]),t._v(" "),e("li",[e("code",[t._v("uint256")])]),t._v(" "),e("li",[e("code",[t._v("bool")])]),t._v(" "),e("li",[e("code",[t._v("bytes32")])]),t._v(" "),e("li",[e("code",[t._v("address")])]),t._v(" "),e("li",[e("code",[t._v("bytes")])]),t._v(" "),e("li",[e("code",[t._v("string")])])]),t._v(" "),e("h4",{attrs:{id:"string32-在链上编码为-bytes32"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string32-在链上编码为-bytes32"}},[t._v("#")]),t._v(" string32 (在链上编码为 "),e("code",[t._v("bytes32")]),t._v(")")]),t._v(" "),e("p",[e("code",[t._v("string32")]),t._v("是一种不被solidity支持的人工类型。 它被编码为"),e("code",[t._v("bytes32")]),t._v("，为少于32个字符的值提供了一个比普通"),e("code",[t._v("string")]),t._v("类型更便宜的选择。")]),t._v(" "),e("p",[t._v("::warning 局限性")]),t._v(" "),e("p",[t._v("虽然使用"),e("code",[t._v("string32")]),t._v("更有效率，但在链上从"),e("code",[t._v("bytes32")]),t._v("解码原始字符串既困难又昂贵。")]),t._v(" "),e("p",[t._v("还要记住，这种类型只能对短于32个字符的字符串进行编码。 如果值更长，它将被修剪，只有前31个字符会被编码。")]),t._v(" "),e("p",[t._v(":::")]),t._v(" "),e("h4",{attrs:{id:"timestamp-在链上编码为-uint256"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timestamp-在链上编码为-uint256"}},[t._v("#")]),t._v(" timestamp (在链上编码为 "),e("code",[t._v("uint256")]),t._v(")")]),t._v(" "),e("p",[e("code",[t._v("timestamp")]),t._v("是一个人造的类型，不被solidity支持。 它被编码为"),e("code",[t._v("uint256")]),t._v('，并指定了事务被编码时的UNIX时间戳值。 你可以在链上使用这个值来检查Airnode响应的 "新鲜度"。 这在某些情况下可能是有用的，因为Airnode不能保证一个特定的交易何时会在链上被开采。')]),t._v(" "),e("p",[t._v("当使用"),e("code",[t._v("timestamp")]),t._v("类型时，相应的"),e("code",[t._v("_path")]),t._v("和"),e("code",[t._v("_times")]),t._v("变量必须是空字符串或不提供。")]),t._v(" "),e("h4",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("p",[t._v('除了上面定义的基元以及我们创建的所有 "人工 "类型之外，你可以自由地将数组与上述任何类型一起使用。 多维数组也被支持。 Solidity 允许你定义固定大小的数组，这对编码来说更省gas，你也可以使用这些数组。')]),t._v(" "),e("p",[t._v("举例")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("int256[]")]),t._v(" - 正整数数组")]),t._v(" "),e("li",[e("code",[t._v("uint256[8]")]),t._v(" - 有8个元素的无符号整数数组")]),t._v(" "),e("li",[e("code",[t._v("int256[] []")]),t._v(" - 2维整数数组")]),t._v(" "),e("li",[e("code",[t._v("string32[]")]),t._v(" - 是一个"),e("code",[t._v("string32")]),t._v("值的数组，在链上将被编码为"),e("code",[t._v("byte32[]")])]),t._v(" "),e("li",[e("code",[t._v("string[2][][3]")]),t._v(" - 3维字符串数组，其中第一维包含3个元素，第二维不受限制地包含许多元素，最后一维只有2个元素。 注意，与C语言相比，这个"),e("a",{attrs:{href:"https://ethereum.stackexchange.com/questions/64331/why-is-multidimensional-array-declaration-order-reversed",target:"_blank",rel:"noopener noreferrer"}},[t._v("定义是逆向读取"),e("OutboundLink")],1),t._v("的")])]),t._v(" "),e("h2",{attrs:{id:"path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[t._v("#")]),t._v(" "),e("code",[t._v("_path")])]),t._v(" "),e("p",[t._v("假设API响应将是一个JSON对象，使用点符号来定义用于满足请求的字段。 例如，如果API返回，")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "field1": {\n    "fieldA": [\n      "valueA1",\n      "valueA2"\n    ],\n    "fieldB: "valueB"\n  },\n  "field2": {\n    "fieldZ": "valueZ"\n  }\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("p",[t._v("那么"),e("code",[t._v("_path")]),t._v(" 为 "),e("code",[t._v("field1.fieldA.1")]),t._v("，其响应将是 "),e("code",[t._v("valueA2")]),t._v("。")]),t._v(" "),e("p",[t._v("如果响应是一个迭代值（即不是JSON对象），并且"),e("code",[t._v("_path")]),t._v("没有提供或为空字符串（需要对"),e("RouterLink",{attrs:{to:"/ois/v1.0.0/reserved-parameters.html#encoding-multiple-values"}},[t._v("多个值进行编码")]),t._v("），Airnode将使用API响应本身来完成请求。")],1),t._v(" "),e("p",[t._v("::warning 小心分隔符")]),t._v(" "),e("p",[t._v("确保API响应的路径中的键不包含"),e("code",[t._v(".")]),t._v("，因为它将被错误地认为是一个分隔符。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "strange.key": "123"\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("定义为 "),e("code",[t._v('"sange.key"')]),t._v(" 的"),e("code",[t._v("_path")]),t._v("将无法工作。 作为变通方法，你可以"),e("RouterLink",{attrs:{to:"/ois/v1.0.0/reserved-parameters.html#escaping-separators"}},[t._v("转义分隔符")]),t._v("。")],1),t._v(" "),e("p",[t._v(":::")]),t._v(" "),e("h3",{attrs:{id:"转义分隔符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转义分隔符"}},[t._v("#")]),t._v(" 转义分隔符")]),t._v(" "),e("p",[t._v("在少数情况下，当API响应的"),e("code",[t._v("_path")]),t._v("包含"),e("code",[t._v(",")]),t._v("或"),e("code",[t._v(".")]),t._v("（逗号或点）时，事情会变得有点复杂。 这些符号在解析保留参数时有非常特殊的意义，如果它们被视为字面意义，就需要转义。 例如，如果API提供者的响应看起来像下面这样")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "very,strange.key": "123"\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("那么你需要转义这些符号，在这种情况下"),e("code",[t._v('_path="very//,strange\\\\.key"')]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"times"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#times"}},[t._v("#")]),t._v(" "),e("code",[t._v("_times")])]),t._v(" "),e("p",[t._v("如果"),e("code",[t._v("_type")]),t._v("是"),e("code",[t._v("int256")]),t._v("或"),e("code",[t._v("uint256")]),t._v("，并且提供了一个有效的"),e("code",[t._v("_times")]),t._v("参数，Annode在完成请求前将API返回的值与"),e("code",[t._v("_times")]),t._v("参数相乘。 例如，如果API返回：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n  "data": "1.238",\n  "apiVersion": "1.0.4"\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("而保留的参数是")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('_type: int256\n_path: data\n_times: "100"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("该请求将以"),e("code",[t._v("123")]),t._v("的值实现。 请注意，这个数字会乘"),e("code",[t._v("100")]),t._v("，然后被向下取整。 这是因为乘法的结果在之后被"),e("RouterLink",{attrs:{to:"/airnode/v0.5/reference/packages/adapter.html"}},[t._v("转换")]),t._v("为"),e("code",[t._v("int256")]),t._v("。")],1),t._v(" "),e("p",[t._v("请确保将"),e("code",[t._v("_times")]),t._v("参数作为字符串传递。 Airnode将在内部把这个字符串转换为数字。 你也可以将空字符串"),e("code",[t._v('""')]),t._v("传递给"),e("code",[t._v("_times")]),t._v("参数--这与不提供"),e("code",[t._v("_times")]),t._v("参数的效果相同。 然而，在对"),e("RouterLink",{attrs:{to:"/ois/v1.0.0/reserved-parameters.html#encoding-multiple-values"}},[t._v("多个数值进行编码")]),t._v("时，这一点很重要。")],1),t._v(" "),e("p",[e("code",[t._v("_times")]),t._v("参数还可以与数组和多维数组一起使用。 API响应数组的所有元素在被编码之前都将被乘上一个数。")]),t._v(" "),e("h2",{attrs:{id:"多值编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多值编码"}},[t._v("#")]),t._v(" 多值编码")]),t._v(" "),e("p",[t._v('Solidity支持解码和 "解构" 多个值。 例如')]),t._v(" "),e("div",{staticClass:"language-solidity line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-solidity"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeMultipleParameters")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("calldata")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pure")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("memory")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),t._v(" num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" addr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" addr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" abi"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("上面的例子演示了分别对"),e("code",[t._v("string")]),t._v("、"),e("code",[t._v("uint256")]),t._v("和"),e("code",[t._v("address")]),t._v("的三个值进行链上解码。 你可以指示Airnode使用保留参数对这些值进行编码，用"),e("code",[t._v(",")]),t._v("（逗号）来分隔这些值。 例如，使用以下保留参数的组合")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string,uint256,address'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_path")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pathToString,pathToFloat,pathToAddress'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_times")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("',10000,'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("Airnode将把保留的参数按"),e("code",[t._v(",")]),t._v('分割成 "分割值"，并确保它们都包含相同数量的参数。 它将提取并转换每个 "分割值"。 注意，一个'),e("code",[t._v('""')]),t._v('（空字符串）用于指定某个保留参数不应该用于某个 "分割值"。')]),t._v(" "),e("p",[t._v("例如，让我们假设API响应看起来像这样")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pathToString"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some string"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pathToFloat"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234.567"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pathToAddress"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xe021...08a74"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v('Airnode将分别提取和转换每个 "分割值"')]),t._v(" "),e("ol",[e("li",[e("code",[t._v('_type="string"')]),t._v(","),e("code",[t._v('_path="pathToString')]),t._v('"和'),e("code",[t._v('__times=""')]),t._v(" 的组合结果是一些 "),e("code",[t._v('"string"')])]),t._v(" "),e("li",[e("code",[t._v('_type="uint256"')]),t._v(", "),e("code",[t._v('_path="pathToFloat"')]),t._v(" 和"),e("code",[t._v('__times="10000"')]),t._v(" 的组合结果为"),e("code",[t._v("12345670")])]),t._v(" "),e("li",[t._v("结合"),e("code",[t._v('_type="address"')]),t._v(", "),e("code",[t._v('_path="pathToAddress"')]),t._v("和"),e("code",[t._v('__times=""')]),t._v("结果是 "),e("code",[t._v('"0xe021...8a74"')])])]),t._v(" "),e("p",[t._v("所有这些值然后一起被编码为单字节值，可以在链上发送。 你可以使用"),e("RouterLink",{attrs:{to:"/airnode/v0.5/grp-providers/guides/build-an-airnode/deploying-airnode.html#testing-with-http-gateway"}},[t._v("测试网关")]),t._v("来检查原始API响应，投票结果和最终的编码值。")],1)],1)}),[],!1,null,null,null);s.default=n.exports}}]);