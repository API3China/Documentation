(window.webpackJsonp=window.webpackJsonp||[]).push([[443],{1096:function(e,t,o){"use strict";o.r(t);var r=o(15),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("TitleSpan",[e._v("参考")]),e._v(" "),o("h1",{attrs:{id:"frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),o("VersionWarning"),e._v(" "),o("TocHeader"),e._v(" "),o("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),e._v(" "),o("p",[e._v("一个"),o("code",[e._v("beaconId")]),e._v("和其"),o("code",[e._v("templateId")]),e._v("跨链中是相同的。 调用方只需要"),o("code",[e._v("beaconId")]),e._v("即可使用 "),o("RouterLink",{attrs:{to:"/beacon/v0.2/functions/read-beacon.html"}},[e._v("readBeacon()")]),e._v("函数来访问其Beacon值。 而"),o("code",[e._v("templateId")]),e._v("仅在当需要更新信标值时才会被使用。 通常这是由Beacon本身调用的，且"),o("strong",[e._v("不")]),e._v("是beacon消费者需要关注的正常操作过程。")],1),e._v(" "),o("p",[e._v("Beacon会在达到其当前值允许的偏差的时候进行自我更新。 每个Beacon后面都有一个模板。 另外，每个Beacon背后的模板都有一个Airnode从API端点返回Beacon的值。 这个模板包含了Airnode在调用API端点的参数。 这可能需要额外的Beacon参数来参与Airnode调用，并和API端点的模板合并。 这整个过程是使用函数"),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/requesters/RrpBeaconServer.sol#L202",target:"_blank",rel:"noopener noreferrer"}},[e._v("requestBeaconUpdate()"),o("OutboundLink")],1),e._v("完成的。")]),e._v(" "),o("p",[e._v("::: 提示")]),e._v(" "),o("p",[e._v("如果您打算要求Beacon进行自我更新，那么在其正常的更新过程外，使用Beacon的模板与否将不太重要。 但是，如果要手动更新Beacon，请求者需要Beacon的templateId以调用"),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/requesters/RrpBeaconServer.sol#L202",target:"_blank",rel:"noopener noreferrer"}},[e._v("requestBeaconUpdate()"),o("OutboundLink")],1),e._v("函数。")]),e._v(" "),o("p",[e._v(":::")]),e._v(" "),o("h2",{attrs:{id:"派生id"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#派生id"}},[e._v("#")]),e._v(" 派生ID")]),e._v(" "),o("p",[e._v("通过对Airnode地址、端点id（endpointId）和模板参数进行哈希处理来创建"),o("code",[e._v("templateId")]),e._v("。 详情请参阅monorepo里的"),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/TemplateUtils.sol#L17-L46",target:"_blank",rel:"noopener noreferrer"}},[e._v("createTemplate()"),o("OutboundLink")],1),e._v("函数。")]),e._v(" "),o("p",[e._v("通过对"),o("code",[e._v("templateId")]),e._v("和Beacon参数进行哈希处理来创建"),o("code",[e._v("beaconId")]),e._v("。 详情请参阅monorepo里的"),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/master/packages/airnode-protocol/contracts/rrp/requesters/RrpBeaconServer.sol#L212",target:"_blank",rel:"noopener noreferrer"}},[e._v("requestBeaconUpdate()"),o("OutboundLink")],1),e._v("函数。")]),e._v(" "),o("p",[e._v("但"),o("code",[e._v("templateId")]),e._v("不能从"),o("code",[e._v("beaconId")]),e._v("中派生。")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);